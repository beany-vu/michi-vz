"use strict";(self.webpackChunkmichi_vz=self.webpackChunkmichi_vz||[]).push([[447],{"./stories/LineChart.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ButtonHoverInteraction:()=>ButtonHoverInteraction,ColorPerDataPoint:()=>ColorPerDataPoint,CombinedView:()=>CombinedView,DifferentShapesAndCurves:()=>DifferentShapesAndCurves,FilterByDifferentDate:()=>FilterByDifferentDate,InteractiveFilterLimit:()=>InteractiveFilterLimit,LargeDataSetAscending:()=>LargeDataSetAscending,LargeDataSetDescending:()=>LargeDataSetDescending,ManyMonths:()=>ManyMonths,ManyTicks:()=>ManyTicks,Monthly:()=>Monthly,MonthlyData:()=>MonthlyData,MultiSeries:()=>MultiSeries,MultiSeriesNoFilter:()=>MultiSeriesNoFilter,NoFilter:()=>NoFilter,PointColorExample:()=>PointColorExample,Primary:()=>Primary,SameDataLabelDifferentShapes:()=>SameDataLabelDifferentShapes,TriangleShapes:()=>TriangleShapes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_src_components_LineChart__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/LineChart.tsx"),_storybook_test__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),_src_components_MichiVzProvider__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/MichiVzProvider.tsx"),_excluded=["filterLimit"];function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _slicedToArray(r,e){return function _arrayWithHoles(r){if(Array.isArray(r))return r}(r)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(r,e)||_unsupportedIterableToArray(r,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return _arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,a):void 0}}function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(e,r,t){return(r=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}const __WEBPACK_DEFAULT_EXPORT__={title:"Charts/Line Chart",component:_src_components_LineChart__WEBPACK_IMPORTED_MODULE_1__.A,tags:["autodocs"],decorators:[function(Story){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_src_components_MichiVzProvider__WEBPACK_IMPORTED_MODULE_3__._,{colorsMapping:{"Country 1":"green","Item 1":"red","Item 2":"purple","Item 3":"orange","Item 4":"green","Item 5":"blue","Item 6":"yellow","Item 7":"brown","Item 8":"pink","Item 9":"cyan","Item 10":"magenta","Item 11":"gray","Item 12":"black","Item 13":"red","Item 14":"purple","Item 15":"orange","Item 16":"green","Item 17":"blue","Item 18":"yellow","Item 19":"brown","Item 20":"pink",Africa:"red","Rest of the World":"blue"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null))}],argTypes:{filterLimit:{control:{type:"range",min:1,max:20,step:1},description:"Number of items to show when filtering"}}};var singleSeriesData=[{label:"Country 1",color:"red",series:[{date:"2002",value:24.14,certainty:!1},{date:"2003",value:20.68,certainty:!0},{date:"2004",value:29.34,certainty:!0},{date:"2006",value:33.6,certainty:!1},{date:"2007",value:33.6,certainty:!0}]}],multiSeriesData=[{label:"Item 1",shape:"triangle",curve:"curveLinear",series:[{year:2016,date:"2016",value:101,certainty:!0},{year:2017,date:"2017",value:201,certainty:!0},{year:2018,date:"2018",value:151,certainty:!1}]},{label:"Item 2",shape:"triangle",curve:"curveLinear",series:[{year:2016,date:"2016",value:102,certainty:!0},{year:2017,date:"2017",value:22,certainty:!0},{year:2018,date:"2018",value:152,certainty:!1}]},{label:"Item 3",shape:"triangle",curve:"curveBumpX",series:[{year:2016,date:"2016",value:103,certainty:!0},{year:2017,date:"2017",value:3,certainty:!0},{year:2018,date:"2018",value:153,certainty:!1}]}],diverseDataSet=[{label:"Rising Trend",shape:"circle",curve:"curveLinear",color:"red",series:[{year:2016,date:"2016",value:32,certainty:!0},{year:2017,date:"2017",value:45,certainty:!0},{year:2018,date:"2018",value:78,certainty:!0},{year:2019,date:"2019",value:105,certainty:!0},{year:2020,date:"2020",value:127,certainty:!0},{year:2021,date:"2021",value:158,certainty:!1},{year:2022,date:"2022",value:190,certainty:!1}]},{label:"Declining Trend",shape:"square",curve:"curveLinear",color:"blue",series:[{year:2016,date:"2016",value:230,certainty:!0},{year:2017,date:"2017",value:192,certainty:!0},{year:2018,date:"2018",value:145,certainty:!0},{year:2019,date:"2019",value:118,certainty:!0},{year:2020,date:"2020",value:87,certainty:!0},{year:2021,date:"2021",value:54,certainty:!1},{year:2022,date:"2022",value:28,certainty:!1}]},{label:"Volatile Pattern",shape:"triangle",curve:"curveBumpX",color:"orange",series:[{year:2016,date:"2016",value:65,certainty:!0},{year:2017,date:"2017",value:120,certainty:!0},{year:2018,date:"2018",value:43,certainty:!0},{year:2019,date:"2019",value:97,certainty:!0},{year:2020,date:"2020",value:35,certainty:!0},{year:2021,date:"2021",value:82,certainty:!1},{year:2022,date:"2022",value:18,certainty:!1}]},{label:"High Plateau (Colored Points)",shape:"circle",curve:"curveLinear",color:"yellow",series:[{year:2016,date:"2016",value:45,certainty:!0},{year:2017,date:"2017",value:175,certainty:!0},{year:2018,date:"2018",value:178,certainty:!0},{year:2019,date:"2019",value:172,certainty:!0},{year:2020,date:"2020",value:180,certainty:!0},{year:2021,date:"2021",value:169,certainty:!1},{year:2022,date:"2022",value:53,certainty:!1}]},{label:"Sudden Spike",shape:"square",curve:"curveLinear",color:"green",series:[{year:2016,date:"2016",value:42,certainty:!0},{year:2017,date:"2017",value:38,certainty:!0},{year:2018,date:"2018",value:45,certainty:!0},{year:2019,date:"2019",value:215,certainty:!0},{year:2020,date:"2020",value:52,certainty:!0},{year:2021,date:"2021",value:48,certainty:!1},{year:2022,date:"2022",value:41,certainty:!1}]},{label:"Steady Low",shape:"circle",curve:"curveLinear",color:"purple",series:[{year:2016,date:"2016",value:12,certainty:!0},{year:2017,date:"2017",value:10,certainty:!0},{year:2018,date:"2018",value:15,certainty:!0},{year:2019,date:"2019",value:18,certainty:!0},{year:2020,date:"2020",value:13,certainty:!0},{year:2021,date:"2021",value:11,certainty:!1},{year:2022,date:"2022",value:14,certainty:!1}]},{label:"U-Shaped Recovery",shape:"triangle",curve:"curveBumpX",color:"blue",series:[{year:2016,date:"2016",value:142,certainty:!0},{year:2017,date:"2017",value:98,certainty:!0},{year:2018,date:"2018",value:56,certainty:!0},{year:2019,date:"2019",value:32,certainty:!0},{year:2020,date:"2020",value:68,certainty:!0},{year:2021,date:"2021",value:115,certainty:!1},{year:2022,date:"2022",value:167,certainty:!1}]},{label:"Bell Curve",shape:"circle",curve:"curveLinear",color:"pink",series:[{year:2016,date:"2016",value:25,certainty:!0},{year:2017,date:"2017",value:68,certainty:!0},{year:2018,date:"2018",value:135,certainty:!0},{year:2019,date:"2019",value:172,certainty:!0},{year:2020,date:"2020",value:124,certainty:!0},{year:2021,date:"2021",value:73,certainty:!1},{year:2022,date:"2022",value:28,certainty:!1}]},{label:"Cyclical Pattern (Heat Map)",shape:"square",curve:"curveBumpX",color:"navy",series:[{year:2016,date:"2016",value:85,certainty:!0},{year:2017,date:"2017",value:152,certainty:!0},{year:2018,date:"2018",value:73,certainty:!0},{year:2019,date:"2019",value:138,certainty:!0},{year:2020,date:"2020",value:62,certainty:!0},{year:2021,date:"2021",value:125,certainty:!1},{year:2022,date:"2022",value:57,certainty:!1}]},{label:"Slight Incline",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:62,certainty:!0},{year:2017,date:"2017",value:65,certainty:!0},{year:2018,date:"2018",value:70,certainty:!0},{year:2019,date:"2019",value:72,certainty:!0},{year:2020,date:"2020",value:78,certainty:!0},{year:2021,date:"2021",value:83,certainty:!1},{year:2022,date:"2022",value:90,certainty:!1}]},{label:"Double Peak",shape:"triangle",curve:"curveBumpX",series:[{year:2016,date:"2016",value:45,certainty:!0},{year:2017,date:"2017",value:132,certainty:!0},{year:2018,date:"2018",value:68,certainty:!0},{year:2019,date:"2019",value:72,certainty:!0},{year:2020,date:"2020",value:143,certainty:!0},{year:2021,date:"2021",value:58,certainty:!1},{year:2022,date:"2022",value:47,certainty:!1}]},{label:"Extreme Growth",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:12,certainty:!0},{year:2017,date:"2017",value:27,certainty:!0},{year:2018,date:"2018",value:42,certainty:!0},{year:2019,date:"2019",value:85,certainty:!0},{year:2020,date:"2020",value:163,certainty:!0},{year:2021,date:"2021",value:245,certainty:!1},{year:2022,date:"2022",value:322,certainty:!1}]},{label:"Outlier Year",shape:"square",curve:"curveBumpX",series:[{year:2016,date:"2016",value:58,certainty:!0},{year:2017,date:"2017",value:62,certainty:!0},{year:2018,date:"2018",value:247,certainty:!0},{year:2019,date:"2019",value:65,certainty:!0},{year:2020,date:"2020",value:73,certainty:!0},{year:2021,date:"2021",value:81,certainty:!1},{year:2022,date:"2022",value:79,certainty:!1}]},{label:"Gradual Decline",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:112,certainty:!0},{year:2017,date:"2017",value:104,certainty:!0},{year:2018,date:"2018",value:95,certainty:!0},{year:2019,date:"2019",value:87,certainty:!0},{year:2020,date:"2020",value:82,certainty:!0},{year:2021,date:"2021",value:78,certainty:!1},{year:2022,date:"2022",value:72,certainty:!1}]},{label:"Steady High",shape:"triangle",curve:"curveLinear",series:[{year:2016,date:"2016",value:168,certainty:!0},{year:2017,date:"2017",value:172,certainty:!0},{year:2018,date:"2018",value:165,certainty:!0},{year:2019,date:"2019",value:174,certainty:!0},{year:2020,date:"2020",value:180,certainty:!0},{year:2021,date:"2021",value:173,certainty:!1},{year:2022,date:"2022",value:175,certainty:!1}]},{label:"Flat Then Rise",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:45,certainty:!0},{year:2017,date:"2017",value:47,certainty:!0},{year:2018,date:"2018",value:44,certainty:!0},{year:2019,date:"2019",value:48,certainty:!0},{year:2020,date:"2020",value:92,certainty:!0},{year:2021,date:"2021",value:145,certainty:!1},{year:2022,date:"2022",value:196,certainty:!1}]},{label:"Choppy Waters",shape:"square",curve:"curveBumpX",series:[{year:2016,date:"2016",value:82,certainty:!0},{year:2017,date:"2017",value:95,certainty:!0},{year:2018,date:"2018",value:73,certainty:!0},{year:2019,date:"2019",value:105,certainty:!0},{year:2020,date:"2020",value:87,certainty:!0},{year:2021,date:"2021",value:120,certainty:!1},{year:2022,date:"2022",value:93,certainty:!1}]},{label:"Erratic Pattern",shape:"triangle",curve:"curveBumpX",series:[{year:2016,date:"2016",value:118,certainty:!0},{year:2017,date:"2017",value:58,certainty:!0},{year:2018,date:"2018",value:187,certainty:!0},{year:2019,date:"2019",value:32,certainty:!0},{year:2020,date:"2020",value:140,certainty:!0},{year:2021,date:"2021",value:63,certainty:!1},{year:2022,date:"2022",value:155,certainty:!1}]},{label:"Consistent Growth",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:35,certainty:!0},{year:2017,date:"2017",value:70,certainty:!0},{year:2018,date:"2018",value:105,certainty:!0},{year:2019,date:"2019",value:140,certainty:!0},{year:2020,date:"2020",value:175,certainty:!0},{year:2021,date:"2021",value:210,certainty:!1},{year:2022,date:"2022",value:245,certainty:!1}]},{label:"Rapid Fall",shape:"square",curve:"curveLinear",series:[{year:2016,date:"2016",value:188,certainty:!0},{year:2017,date:"2017",value:130,certainty:!0},{year:2018,date:"2018",value:85,certainty:!0},{year:2019,date:"2019",value:42,certainty:!0},{year:2020,date:"2020",value:20,certainty:!0},{year:2021,date:"2021",value:15,certainty:!1},{year:2022,date:"2022",value:12,certainty:!1}]}],largeDataSet=[{label:"Item 1",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:101,certainty:!0},{year:2017,date:"2017",value:201,certainty:!0},{year:2018,date:"2018",value:151,certainty:!1}]},{label:"Item 2",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:102,certainty:!0},{year:2017,date:"2017",value:22,certainty:!0},{year:2018,date:"2018",value:152,certainty:!1}]},{label:"Item 3",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:103,certainty:!0},{year:2017,date:"2017",value:3,certainty:!0},{year:2018,date:"2018",value:153,certainty:!1}]},{label:"Item 4",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:104,certainty:!0},{year:2017,date:"2017",value:204,certainty:!0},{year:2018,date:"2018",value:154,certainty:!1}]},{label:"Item 5",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:105,certainty:!0},{year:2017,date:"2017",value:205,certainty:!0},{year:2018,date:"2018",value:155,certainty:!1}]},{label:"Item 6",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:106,certainty:!0},{year:2017,date:"2017",value:206,certainty:!0},{year:2018,date:"2018",value:156,certainty:!1}]},{label:"Item 7",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:107,certainty:!0},{year:2017,date:"2017",value:27,certainty:!0},{year:2018,date:"2018",value:157,certainty:!1}]},{label:"Item 8",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:108,certainty:!0},{year:2017,date:"2017",value:208,certainty:!0},{year:2018,date:"2018",value:58,certainty:!1}]},{label:"Item 9",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:109,certainty:!0},{year:2017,date:"2017",value:209,certainty:!0},{year:2018,date:"2018",value:159,certainty:!1}]},{label:"Item 10",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:110,certainty:!0},{year:2017,date:"2017",value:210,certainty:!0},{year:2018,date:"2018",value:160,certainty:!1}]},{label:"Item 11",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:111,certainty:!0},{year:2017,date:"2017",value:211,certainty:!0},{year:2018,date:"2018",value:161,certainty:!1}]},{label:"Item 12",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:112,certainty:!0},{year:2017,date:"2017",value:212,certainty:!0},{year:2018,date:"2018",value:162,certainty:!1}]},{label:"Item 13",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:113,certainty:!0},{year:2017,date:"2017",value:213,certainty:!0},{year:2018,date:"2018",value:163,certainty:!1}]},{label:"Item 14",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:114,certainty:!0},{year:2017,date:"2017",value:214,certainty:!0},{year:2018,date:"2018",value:164,certainty:!1}]},{label:"Item 15",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:115,certainty:!0},{year:2017,date:"2017",value:215,certainty:!0},{year:2018,date:"2018",value:165,certainty:!1}]},{label:"Item 16",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:116,certainty:!0},{year:2017,date:"2017",value:216,certainty:!0},{year:2018,date:"2018",value:166,certainty:!1}]},{label:"Item 17",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:117,certainty:!0},{year:2017,date:"2017",value:217,certainty:!0},{year:2018,date:"2018",value:167,certainty:!1}]},{label:"Item 18",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:118,certainty:!0},{year:2017,date:"2017",value:218,certainty:!0},{year:2018,date:"2018",value:68,certainty:!1}]},{label:"Item 19",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:119,certainty:!0},{year:2017,date:"2017",value:219,certainty:!0},{year:2018,date:"2018",value:19,certainty:!1}]},{label:"Item 20",shape:"circle",curve:"curveLinear",series:[{year:2016,date:"2016",value:20,certainty:!0},{year:2017,date:"2017",value:220,certainty:!0},{year:2018,date:"2018",value:170,certainty:!1}]}],colorPerPointDataSet=[{label:"Temperature Variations",shape:"circle",curve:"curveLinear",series:[{date:"2016",value:35,certainty:!0,color:"#2196F3"},{date:"2017",value:65,certainty:!0,color:"#4CAF50"},{date:"2018",value:85,certainty:!0,color:"#FF9800"},{date:"2019",value:95,certainty:!0,color:"#F44336"},{date:"2020",value:75,certainty:!0,color:"#FF9800"},{date:"2021",value:55,certainty:!1,color:"#4CAF50"},{date:"2022",value:30,certainty:!1,color:"#2196F3"}]},{label:"Performance Metrics",shape:"square",curve:"curveLinear",series:[{date:"2016",value:42,certainty:!0,color:"#F44336"},{date:"2017",value:58,certainty:!0,color:"#FF9800"},{date:"2018",value:67,certainty:!0,color:"#FFEB3B"},{date:"2019",value:82,certainty:!0,color:"#4CAF50"},{date:"2020",value:94,certainty:!0,color:"#2196F3"},{date:"2021",value:88,certainty:!1,color:"#4CAF50"},{date:"2022",value:75,certainty:!1,color:"#FFEB3B"}]},{label:"Risk Assessment",shape:"triangle",curve:"curveBumpX",series:[{date:"2016",value:120,certainty:!0,color:"#F44336"},{date:"2017",value:95,certainty:!0,color:"#FF9800"},{date:"2018",value:65,certainty:!0,color:"#4CAF50"},{date:"2019",value:85,certainty:!0,color:"#FF9800"},{date:"2020",value:110,certainty:!0,color:"#F44336"},{date:"2021",value:75,certainty:!1,color:"#FF9800"},{date:"2022",value:55,certainty:!1,color:"#4CAF50"}]}],commonProps={width:900,height:400,margin:{top:50,right:50,bottom:50,left:50},onChartDataProcessed:(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.fn)(),onHighlightItem:(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.fn)(),yAxisFormat:function yAxisFormat(d){return"".concat(d,"%")},xAxisDataType:"date_annual",tooltipFormatter:function tooltipFormatter(d,series,dataSet){return'\n      <div style="background: #fff; padding: 8px; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">\n        <div style="font-weight: bold; margin-bottom: 4px;">'.concat(d.label,"</div>\n        <div>Date: ").concat(d.date,"</div>\n        <div>Value: ").concat(d.value,"%</div>\n      </div>\n    ")}},Primary={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:singleSeriesData,title:"Single Series Line Chart",series:[{label:"Africa",series:[{year:2015,date:"2015",value:-63.85,certainty:!1,code:"1001"},{year:2016,date:"2016",value:-64.01,certainty:!0,code:"1001"},{year:2017,date:"2017",value:-63.84,certainty:!0,code:"1001"},{year:2018,date:"2018",value:-89.53,certainty:!0,code:"1001"},{year:2019,date:"2019",value:-53.03,certainty:!0,code:"1001"},{year:2020,date:"2020",value:-84.09,certainty:!0,code:"1001"},{year:2021,date:"2021",value:-43.87,certainty:!0,code:"1001"}]},{label:"Rest of the World",series:[{year:2015,date:"2015",value:-86.95,certainty:!1,code:"1002"},{year:2016,date:"2016",value:-75.09,certainty:!0,code:"1002"},{year:2017,date:"2017",value:-69.48,certainty:!0,code:"1002"},{year:2018,date:"2018",value:-64.23,certainty:!0,code:"1002"},{year:2019,date:"2019",value:-62.17,certainty:!0,code:"1002"},{year:2020,date:"2020",value:-86.63,certainty:!0,code:"1002"},{year:2021,date:"2021",value:-88.95,certainty:!0,code:"1002"}]}],filter:null})},NoFilter={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:singleSeriesData,title:"Line Chart with No Filter",filter:null})},MultiSeries={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:multiSeriesData,title:"Multi-Series Line Chart",filter:{limit:2,date:"2017",criteria:"value",sortingDir:"desc"}})},MultiSeriesNoFilter={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:multiSeriesData,title:"Multi-Series Line Chart (No Filter)",filter:null})},LargeDataSetAscending={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:largeDataSet,title:"Large Dataset (Ascending Filter)",filter:{limit:5,date:"2017",criteria:"value",sortingDir:"asc"}})},LargeDataSetDescending={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:largeDataSet,title:"Large Dataset (Descending Filter)",filter:{limit:5,date:"2017",criteria:"value",sortingDir:"desc"}})},FilterByDifferentDate={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:largeDataSet,title:"Filter by 2018 Data",filter:{limit:5,date:"2018",criteria:"value",sortingDir:"desc"}})},CombinedView={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:multiSeriesData,title:"Combined View with Hover Effects",filter:null,showCombined:!0})},DifferentShapesAndCurves={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:[{label:"Circle Series",shape:"circle",curve:"curveLinear",color:"#4287f5",series:[{date:"2016",value:100,certainty:!0},{date:"2017",value:150,certainty:!0},{date:"2018",value:120,certainty:!0},{date:"2019",value:180,certainty:!0},{date:"2020",value:140,certainty:!0}]},{label:"Square Series",shape:"square",curve:"curveBumpX",color:"#f54242",series:[{date:"2016",value:80,certainty:!0},{date:"2017",value:130,certainty:!0},{date:"2018",value:100,certainty:!0},{date:"2019",value:160,certainty:!0},{date:"2020",value:120,certainty:!0}]},{label:"Triangle Series",shape:"triangle",curve:"curveLinear",color:"#42f554",series:[{date:"2016",value:60,certainty:!0},{date:"2017",value:110,certainty:!0},{date:"2018",value:80,certainty:!0},{date:"2019",value:140,certainty:!0},{date:"2020",value:100,certainty:!0}]}],title:"Different Shapes and Curves",filter:null}),parameters:{docs:{description:{story:"This example shows different marker shapes (circle, square, triangle) with different curve types (linear and bumpX)."}}}},MonthlyData={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:[{label:"Monthly Trends",color:"blue",series:[{date:"2022-01",value:45.2,certainty:!0},{date:"2022-02",value:48.6,certainty:!0},{date:"2022-03",value:52.1,certainty:!0},{date:"2022-04",value:55.8,certainty:!0},{date:"2022-05",value:60.3,certainty:!0},{date:"2022-06",value:63.7,certainty:!0},{date:"2022-07",value:61.2,certainty:!1},{date:"2022-08",value:58.4,certainty:!1},{date:"2022-09",value:53.9,certainty:!1},{date:"2022-10",value:49.7,certainty:!1},{date:"2022-11",value:46.5,certainty:!1},{date:"2022-12",value:43.8,certainty:!1}]}],title:"Monthly Data Example",xAxisDataType:"date_monthly",filter:null})},ColorPerDataPoint={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:colorPerPointDataSet,title:"Color Per Data Point",filter:null}),parameters:{docs:{description:{story:"This example demonstrates setting individual colors for each data point in a series. The colors can represent categories or thresholds (like temperature ranges, performance levels, or risk assessments)."}}}},InteractiveFilterLimit={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:[].concat(function _toConsumableArray(r){return function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}(r)||function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}(r)||_unsupportedIterableToArray(r)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(diverseDataSet.slice(0,17)),colorPerPointDataSet),title:"Interactive Filter Limit with Diverse Data Patterns",filterLimit:5}),render:function render(args){var filterLimit=args.filterLimit,rest=function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(-1!==e.indexOf(n))continue;t[n]=r[n]}return t}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)o=n[r],-1===t.indexOf(o)&&{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}(args,_excluded);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_src_components_LineChart__WEBPACK_IMPORTED_MODULE_1__.A,_extends({},rest,{filter:{limit:filterLimit,date:"2017",criteria:"value",sortingDir:"desc"}}))},parameters:{docs:{description:{story:"This example uses a dataset with diverse patterns (rising trends, declining trends, cyclical patterns, sudden spikes, plateaus, etc.) to better illustrate how the filter limit affects which data series are displayed. Some series include per-point coloring. Try adjusting the slider to see different patterns emerge."}}}},PointColorExample={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:colorPerPointDataSet,title:"Data Points with Individual Colors",filter:null}),parameters:{docs:{description:{story:"This example shows how to assign individual colors to data points within a series. This is useful for visualizing categorical data or status changes where color represents meaning, such as temperature ranges, performance levels, or risk assessments."}}}},ManyTicks={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:diverseDataSet,title:"Chart with Many X-Axis Ticks (Annual Data)",xAxisDataType:"date_annual",ticks:30,filter:null}),parameters:{docs:{description:{story:"This example demonstrates how the chart renders when a high number of ticks is requested for the x-axis. This can be useful for testing label overlap and tick density."}}}},TriangleShapes={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:[{label:"Triangle Series 1",shape:"triangle",curve:"curveLinear",color:"#FF5733",series:[{date:"2016",value:50,certainty:!0},{date:"2017",value:75,certainty:!0},{date:"2018",value:60,certainty:!0},{date:"2019",value:85,certainty:!0},{date:"2020",value:70,certainty:!0}]},{label:"Triangle Series 2",shape:"triangle",curve:"curveBumpX",color:"#33FF57",series:[{date:"2016",value:30,certainty:!0},{date:"2017",value:45,certainty:!0},{date:"2018",value:35,certainty:!0},{date:"2019",value:55,certainty:!0},{date:"2020",value:40,certainty:!0}]},{label:"Circle Reference",shape:"circle",curve:"curveLinear",color:"#3357FF",series:[{date:"2016",value:40,certainty:!0},{date:"2017",value:60,certainty:!0},{date:"2018",value:45,certainty:!0},{date:"2019",value:70,certainty:!0},{date:"2020",value:55,certainty:!0}]}],title:"Triangle Shape Test",filter:null}),parameters:{docs:{description:{story:"This example demonstrates the triangle shape markers with different curves and colors. Includes a circle series for comparison."}}}},ButtonHoverInteraction={args:_objectSpread(_objectSpread({},commonProps),{},{filterLimit:5,dataSet:[{label:"Performance",shape:"circle",curve:"curveLinear",color:"#2196F3",series:[{date:"2019",value:75,certainty:!0},{date:"2020",value:82,certainty:!0},{date:"2021",value:90,certainty:!0},{date:"2022",value:85,certainty:!1}]},{label:"Efficiency",shape:"square",curve:"curveLinear",color:"#4CAF50",series:[{date:"2019",value:60,certainty:!0},{date:"2020",value:75,certainty:!0},{date:"2021",value:85,certainty:!0},{date:"2022",value:80,certainty:!1}]},{label:"Quality",shape:"triangle",curve:"curveBumpX",color:"#FF9800",series:[{date:"2019",value:85,certainty:!0},{date:"2020",value:88,certainty:!0},{date:"2021",value:92,certainty:!0},{date:"2022",value:95,certainty:!1}]},{label:"Innovation",shape:"circle",curve:"curveLinear",color:"#9C27B0",series:[{date:"2019",value:45,certainty:!0},{date:"2020",value:52,certainty:!0},{date:"2021",value:68,certainty:!0},{date:"2022",value:72,certainty:!1}]},{label:"Customer Satisfaction",shape:"square",curve:"curveLinear",color:"#FF5722",series:[{date:"2019",value:80,certainty:!0},{date:"2020",value:78,certainty:!0},{date:"2021",value:82,certainty:!0},{date:"2022",value:88,certainty:!1}]}],title:"Interactive Button Hover Example",filter:{limit:5,date:"2021",criteria:"value",sortingDir:"desc"}}),argTypes:{filterLimit:{control:{type:"range",min:1,max:5,step:1},description:"Number of items to show"}},render:function render(args){var _React$useState2=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_0__.useState([]),2),currentHighlight=_React$useState2[0],setCurrentHighlight=_React$useState2[1],_React$useState4=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_0__.useState("2021"),2),filterDate=_React$useState4[0],setFilterDate=_React$useState4[1],availableDates=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){var dates=new Set;return args.dataSet.forEach((function(item){item.series.forEach((function(point){dates.add(point.date.toString())}))})),Array.from(dates).sort()}),[args.dataSet]),filteredDataSet=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return _objectSpread(_objectSpread({},args),{},{filter:{limit:args.filterLimit||5,date:filterDate,criteria:"value",sortingDir:"desc"}})}),[args,filterDate]),buttonStyle=function buttonStyle(label){var _args$dataSet$find,_args$dataSet$find2,_args$dataSet$find3;return{padding:"8px 16px",border:"2px solid",borderColor:(null===(_args$dataSet$find=args.dataSet.find((function(d){return d.label===label})))||void 0===_args$dataSet$find?void 0:_args$dataSet$find.color)||"#ccc",borderRadius:"4px",background:currentHighlight.includes(label)?null===(_args$dataSet$find2=args.dataSet.find((function(d){return d.label===label})))||void 0===_args$dataSet$find2?void 0:_args$dataSet$find2.color:"white",color:currentHighlight.includes(label)?"white":null===(_args$dataSet$find3=args.dataSet.find((function(d){return d.label===label})))||void 0===_args$dataSet$find3?void 0:_args$dataSet$find3.color,cursor:"pointer",transition:"all 0.3s ease",fontWeight:500}};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_src_components_MichiVzProvider__WEBPACK_IMPORTED_MODULE_3__._,{colorsMapping:args.dataSet.reduce((function(acc,item){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},item.label,item.color))}),{}),highlightItems:currentHighlight},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",gap:"20px",marginBottom:"20px",alignItems:"center"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("label",{style:{fontSize:"14px",fontWeight:500}},"Reference Date: "),react__WEBPACK_IMPORTED_MODULE_0__.createElement("select",{value:filterDate,onChange:function onChange(e){return setFilterDate(e.target.value)},style:{padding:"8px 12px",borderRadius:"4px",border:"1px solid #ccc",fontSize:"14px",minWidth:"120px"}},availableDates.map((function(date){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option",{key:date,value:date},date)}))))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",gap:"10px",marginBottom:"20px",flexWrap:"wrap"}},filteredDataSet.dataSet.map((function(item){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{key:item.label,style:buttonStyle(item.label),onMouseEnter:function onMouseEnter(){return setCurrentHighlight([item.label])},onMouseLeave:function onMouseLeave(){return setCurrentHighlight([])}},item.label)})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{style:{padding:"8px 16px",border:"2px solid #666",borderRadius:"4px",background:currentHighlight.length===args.filterLimit?"#666":"white",color:currentHighlight.length===args.filterLimit?"white":"#666",cursor:"pointer",transition:"all 0.3s ease",fontWeight:500},onMouseEnter:function onMouseEnter(){return setCurrentHighlight(filteredDataSet.dataSet.map((function(d){return d.label})))},onMouseLeave:function onMouseLeave(){return setCurrentHighlight([])}},"Show All")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_src_components_LineChart__WEBPACK_IMPORTED_MODULE_1__.A,filteredDataSet)))},parameters:{docs:{description:{story:"This example demonstrates button-based hover interaction with the line chart using the MichiVzProvider context. Use the slider in the controls panel to adjust how many lines to show, and select which date to use as reference for the filtering. Hover over the buttons to highlight corresponding lines and data points. The 'Show All' button highlights all visible series simultaneously."}}}},SameDataLabelDifferentShapes={args:_objectSpread(_objectSpread({},commonProps),{},{dataSet:[{label:"Performance Metrics",shape:"circle",curve:"curveLinear",color:"#2196F3",series:[{date:"2019",value:75,certainty:!0},{date:"2020",value:82,certainty:!0},{date:"2021",value:90,certainty:!0},{date:"2022",value:85,certainty:!1}]},{label:"Performance Metrics",shape:"triangle",curve:"curveLinear",color:"#4CAF50",series:[{date:"2019",value:65,certainty:!0},{date:"2020",value:72,certainty:!0},{date:"2021",value:80,certainty:!0},{date:"2022",value:75,certainty:!1}]},{label:"Other Metric",shape:"square",curve:"curveLinear",color:"#FF9800",series:[{date:"2019",value:45,certainty:!0},{date:"2020",value:52,certainty:!0},{date:"2021",value:58,certainty:!0},{date:"2022",value:62,certainty:!1}]}],title:"Same Label Different Shapes Test"}),parameters:{docs:{description:{story:"This example demonstrates how the chart handles multiple datasets with the same label but different shapes and colors. When hovering over a line or shape, all elements with the same data-label should be highlighted together."}}},render:function render(args){var _React$useState6=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_0__.useState([]),2),currentHighlight=_React$useState6[0],setCurrentHighlight=_React$useState6[1],buttonStyle=function buttonStyle(label){var _args$dataSet$find4,_args$dataSet$find5,_args$dataSet$find6;return{padding:"8px 16px",border:"2px solid",borderColor:(null===(_args$dataSet$find4=args.dataSet.find((function(d){return d.label===label})))||void 0===_args$dataSet$find4?void 0:_args$dataSet$find4.color)||"#ccc",borderRadius:"4px",background:currentHighlight.includes(label)?null===(_args$dataSet$find5=args.dataSet.find((function(d){return d.label===label})))||void 0===_args$dataSet$find5?void 0:_args$dataSet$find5.color:"white",color:currentHighlight.includes(label)?"white":null===(_args$dataSet$find6=args.dataSet.find((function(d){return d.label===label})))||void 0===_args$dataSet$find6?void 0:_args$dataSet$find6.color,cursor:"pointer",transition:"all 0.3s ease",fontWeight:500}},uniqueLabels=Array.from(new Set(args.dataSet.map((function(d){return d.label}))));return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_src_components_MichiVzProvider__WEBPACK_IMPORTED_MODULE_3__._,{colorsMapping:args.dataSet.reduce((function(acc,item){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},item.label,item.color))}),{}),highlightItems:currentHighlight},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",gap:"10px",marginBottom:"20px",flexWrap:"wrap"}},uniqueLabels.map((function(label){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{key:label,style:buttonStyle(label),onMouseEnter:function onMouseEnter(){return setCurrentHighlight([label])},onMouseLeave:function onMouseLeave(){return setCurrentHighlight([])}},label)})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{style:{padding:"8px 16px",border:"2px solid #666",borderRadius:"4px",background:currentHighlight.length===uniqueLabels.length?"#666":"white",color:currentHighlight.length===uniqueLabels.length?"white":"#666",cursor:"pointer",transition:"all 0.3s ease",fontWeight:500},onMouseEnter:function onMouseEnter(){return setCurrentHighlight(uniqueLabels)},onMouseLeave:function onMouseLeave(){return setCurrentHighlight([])}},"Show All")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_src_components_LineChart__WEBPACK_IMPORTED_MODULE_1__.A,args)))}},Monthly={args:{dataSet:[{label:"Monthly Sales",series:[{date:"2023-01-01",value:100,certainty:!0},{date:"2023-02-01",value:120,certainty:!0},{date:"2023-03-01",value:90,certainty:!0},{date:"2023-04-01",value:130,certainty:!0},{date:"2023-05-01",value:110,certainty:!0}]}],width:700,height:400,margin:{top:50,right:50,bottom:50,left:50},showCombined:!1,yAxisFormat:function yAxisFormat(d){return"".concat(d)},xAxisDataType:"date_monthly",title:"Monthly Data (Small Range)",tooltipFormatter:function tooltipFormatter(dataSet,d){return JSON.stringify(d)}}},ManyMonths={args:{dataSet:[{label:"Long Monthly Series",series:Array.from({length:36},(function(_,i){return{date:new Date(2021,i,1).toISOString().slice(0,10),value:100+Math.round(30*Math.sin(i/3)+20*Math.random()),certainty:!0}}))}],width:700,height:400,margin:{top:50,right:50,bottom:50,left:50},showCombined:!1,yAxisFormat:function yAxisFormat(d){return"".concat(d)},xAxisDataType:"date_monthly",title:"Monthly Data (Many Months)",tooltipFormatter:function tooltipFormatter(dataSet,d){return JSON.stringify(d)}}};const __namedExportsOrder=["Primary","NoFilter","MultiSeries","MultiSeriesNoFilter","LargeDataSetAscending","LargeDataSetDescending","FilterByDifferentDate","CombinedView","DifferentShapesAndCurves","MonthlyData","ColorPerDataPoint","InteractiveFilterLimit","PointColorExample","ManyTicks","TriangleShapes","ButtonHoverInteraction","SameDataLabelDifferentShapes","Monthly","ManyMonths"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: singleSeriesData,\n    title: "Single Series Line Chart",\n    series: [{\n      label: "Africa",\n      series: [{\n        year: 2015,\n        date: "2015",\n        value: -63.85,\n        certainty: false,\n        code: "1001"\n      }, {\n        year: 2016,\n        date: "2016",\n        value: -64.01,\n        certainty: true,\n        code: "1001"\n      }, {\n        year: 2017,\n        date: "2017",\n        value: -63.84,\n        certainty: true,\n        code: "1001"\n      }, {\n        year: 2018,\n        date: "2018",\n        value: -89.53,\n        certainty: true,\n        code: "1001"\n      }, {\n        year: 2019,\n        date: "2019",\n        value: -53.03,\n        certainty: true,\n        code: "1001"\n      }, {\n        year: 2020,\n        date: "2020",\n        value: -84.09,\n        certainty: true,\n        code: "1001"\n      }, {\n        year: 2021,\n        date: "2021",\n        value: -43.87,\n        certainty: true,\n        code: "1001"\n      }]\n    }, {\n      label: "Rest of the World",\n      series: [{\n        year: 2015,\n        date: "2015",\n        value: -86.95,\n        certainty: false,\n        code: "1002"\n      }, {\n        year: 2016,\n        date: "2016",\n        value: -75.09,\n        certainty: true,\n        code: "1002"\n      }, {\n        year: 2017,\n        date: "2017",\n        value: -69.48,\n        certainty: true,\n        code: "1002"\n      }, {\n        year: 2018,\n        date: "2018",\n        value: -64.23,\n        certainty: true,\n        code: "1002"\n      }, {\n        year: 2019,\n        date: "2019",\n        value: -62.17,\n        certainty: true,\n        code: "1002"\n      }, {\n        year: 2020,\n        date: "2020",\n        value: -86.63,\n        certainty: true,\n        code: "1002"\n      }, {\n        year: 2021,\n        date: "2021",\n        value: -88.95,\n        certainty: true,\n        code: "1002"\n      }]\n    }],\n    filter: null\n  }\n}',...Primary.parameters?.docs?.source}}},NoFilter.parameters={...NoFilter.parameters,docs:{...NoFilter.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: singleSeriesData,\n    title: "Line Chart with No Filter",\n    filter: null\n  }\n}',...NoFilter.parameters?.docs?.source}}},MultiSeries.parameters={...MultiSeries.parameters,docs:{...MultiSeries.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: multiSeriesData,\n    title: "Multi-Series Line Chart",\n    filter: {\n      limit: 2,\n      date: "2017",\n      criteria: "value",\n      sortingDir: "desc"\n    }\n  }\n}',...MultiSeries.parameters?.docs?.source}}},MultiSeriesNoFilter.parameters={...MultiSeriesNoFilter.parameters,docs:{...MultiSeriesNoFilter.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: multiSeriesData,\n    title: "Multi-Series Line Chart (No Filter)",\n    filter: null\n  }\n}',...MultiSeriesNoFilter.parameters?.docs?.source}}},LargeDataSetAscending.parameters={...LargeDataSetAscending.parameters,docs:{...LargeDataSetAscending.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: largeDataSet,\n    title: "Large Dataset (Ascending Filter)",\n    filter: {\n      limit: 5,\n      date: "2017",\n      criteria: "value",\n      sortingDir: "asc"\n    }\n  }\n}',...LargeDataSetAscending.parameters?.docs?.source}}},LargeDataSetDescending.parameters={...LargeDataSetDescending.parameters,docs:{...LargeDataSetDescending.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: largeDataSet,\n    title: "Large Dataset (Descending Filter)",\n    filter: {\n      limit: 5,\n      date: "2017",\n      criteria: "value",\n      sortingDir: "desc"\n    }\n  }\n}',...LargeDataSetDescending.parameters?.docs?.source}}},FilterByDifferentDate.parameters={...FilterByDifferentDate.parameters,docs:{...FilterByDifferentDate.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: largeDataSet,\n    title: "Filter by 2018 Data",\n    filter: {\n      limit: 5,\n      date: "2018",\n      criteria: "value",\n      sortingDir: "desc"\n    }\n  }\n}',...FilterByDifferentDate.parameters?.docs?.source}}},CombinedView.parameters={...CombinedView.parameters,docs:{...CombinedView.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: multiSeriesData,\n    title: "Combined View with Hover Effects",\n    filter: null,\n    showCombined: true\n  }\n}',...CombinedView.parameters?.docs?.source}}},DifferentShapesAndCurves.parameters={...DifferentShapesAndCurves.parameters,docs:{...DifferentShapesAndCurves.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: [{\n      label: "Circle Series",\n      shape: "circle",\n      curve: "curveLinear",\n      color: "#4287f5",\n      series: [{\n        date: "2016",\n        value: 100,\n        certainty: true\n      }, {\n        date: "2017",\n        value: 150,\n        certainty: true\n      }, {\n        date: "2018",\n        value: 120,\n        certainty: true\n      }, {\n        date: "2019",\n        value: 180,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 140,\n        certainty: true\n      }]\n    }, {\n      label: "Square Series",\n      shape: "square",\n      curve: "curveBumpX",\n      color: "#f54242",\n      series: [{\n        date: "2016",\n        value: 80,\n        certainty: true\n      }, {\n        date: "2017",\n        value: 130,\n        certainty: true\n      }, {\n        date: "2018",\n        value: 100,\n        certainty: true\n      }, {\n        date: "2019",\n        value: 160,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 120,\n        certainty: true\n      }]\n    }, {\n      label: "Triangle Series",\n      shape: "triangle",\n      curve: "curveLinear",\n      color: "#42f554",\n      series: [{\n        date: "2016",\n        value: 60,\n        certainty: true\n      }, {\n        date: "2017",\n        value: 110,\n        certainty: true\n      }, {\n        date: "2018",\n        value: 80,\n        certainty: true\n      }, {\n        date: "2019",\n        value: 140,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 100,\n        certainty: true\n      }]\n    }],\n    title: "Different Shapes and Curves",\n    filter: null\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example shows different marker shapes (circle, square, triangle) with different curve types (linear and bumpX)."\n      }\n    }\n  }\n}',...DifferentShapesAndCurves.parameters?.docs?.source}}},MonthlyData.parameters={...MonthlyData.parameters,docs:{...MonthlyData.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: [{\n      label: "Monthly Trends",\n      color: "blue",\n      series: [{\n        date: "2022-01",\n        value: 45.2,\n        certainty: true\n      }, {\n        date: "2022-02",\n        value: 48.6,\n        certainty: true\n      }, {\n        date: "2022-03",\n        value: 52.1,\n        certainty: true\n      }, {\n        date: "2022-04",\n        value: 55.8,\n        certainty: true\n      }, {\n        date: "2022-05",\n        value: 60.3,\n        certainty: true\n      }, {\n        date: "2022-06",\n        value: 63.7,\n        certainty: true\n      }, {\n        date: "2022-07",\n        value: 61.2,\n        certainty: false\n      }, {\n        date: "2022-08",\n        value: 58.4,\n        certainty: false\n      }, {\n        date: "2022-09",\n        value: 53.9,\n        certainty: false\n      }, {\n        date: "2022-10",\n        value: 49.7,\n        certainty: false\n      }, {\n        date: "2022-11",\n        value: 46.5,\n        certainty: false\n      }, {\n        date: "2022-12",\n        value: 43.8,\n        certainty: false\n      }]\n    }],\n    title: "Monthly Data Example",\n    xAxisDataType: "date_monthly",\n    filter: null\n  }\n}',...MonthlyData.parameters?.docs?.source}}},ColorPerDataPoint.parameters={...ColorPerDataPoint.parameters,docs:{...ColorPerDataPoint.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: colorPerPointDataSet,\n    title: "Color Per Data Point",\n    filter: null\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example demonstrates setting individual colors for each data point in a series. The colors can represent categories or thresholds (like temperature ranges, performance levels, or risk assessments)."\n      }\n    }\n  }\n}',...ColorPerDataPoint.parameters?.docs?.source}}},InteractiveFilterLimit.parameters={...InteractiveFilterLimit.parameters,docs:{...InteractiveFilterLimit.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: [...diverseDataSet.slice(0, 17), ...colorPerPointDataSet],\n    title: "Interactive Filter Limit with Diverse Data Patterns",\n    filterLimit: 5 // Initial value for the slider\n  },\n  // Use render function to dynamically create the component with the slider value\n  render: args => {\n    const {\n      filterLimit,\n      ...rest\n    } = args;\n    return <LineChartComponent {...rest} filter={{\n      limit: filterLimit,\n      date: "2017",\n      criteria: "value",\n      sortingDir: "desc"\n    }} />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example uses a dataset with diverse patterns (rising trends, declining trends, cyclical patterns, sudden spikes, plateaus, etc.) to better illustrate how the filter limit affects which data series are displayed. Some series include per-point coloring. Try adjusting the slider to see different patterns emerge."\n      }\n    }\n  }\n}',...InteractiveFilterLimit.parameters?.docs?.source}}},PointColorExample.parameters={...PointColorExample.parameters,docs:{...PointColorExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: colorPerPointDataSet,\n    title: "Data Points with Individual Colors",\n    filter: null\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example shows how to assign individual colors to data points within a series. This is useful for visualizing categorical data or status changes where color represents meaning, such as temperature ranges, performance levels, or risk assessments."\n      }\n    }\n  }\n}',...PointColorExample.parameters?.docs?.source}}},ManyTicks.parameters={...ManyTicks.parameters,docs:{...ManyTicks.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: diverseDataSet,\n    title: "Chart with Many X-Axis Ticks (Annual Data)",\n    xAxisDataType: "date_annual",\n    // Ensure correct data type\n    ticks: 30,\n    // Set a high number of ticks\n    filter: null\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example demonstrates how the chart renders when a high number of ticks is requested for the x-axis. This can be useful for testing label overlap and tick density."\n      }\n    }\n  }\n}',...ManyTicks.parameters?.docs?.source}}},TriangleShapes.parameters={...TriangleShapes.parameters,docs:{...TriangleShapes.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: [{\n      label: "Triangle Series 1",\n      shape: "triangle",\n      curve: "curveLinear",\n      color: "#FF5733",\n      series: [{\n        date: "2016",\n        value: 50,\n        certainty: true\n      }, {\n        date: "2017",\n        value: 75,\n        certainty: true\n      }, {\n        date: "2018",\n        value: 60,\n        certainty: true\n      }, {\n        date: "2019",\n        value: 85,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 70,\n        certainty: true\n      }]\n    }, {\n      label: "Triangle Series 2",\n      shape: "triangle",\n      curve: "curveBumpX",\n      color: "#33FF57",\n      series: [{\n        date: "2016",\n        value: 30,\n        certainty: true\n      }, {\n        date: "2017",\n        value: 45,\n        certainty: true\n      }, {\n        date: "2018",\n        value: 35,\n        certainty: true\n      }, {\n        date: "2019",\n        value: 55,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 40,\n        certainty: true\n      }]\n    }, {\n      label: "Circle Reference",\n      shape: "circle",\n      curve: "curveLinear",\n      color: "#3357FF",\n      series: [{\n        date: "2016",\n        value: 40,\n        certainty: true\n      }, {\n        date: "2017",\n        value: 60,\n        certainty: true\n      }, {\n        date: "2018",\n        value: 45,\n        certainty: true\n      }, {\n        date: "2019",\n        value: 70,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 55,\n        certainty: true\n      }]\n    }],\n    title: "Triangle Shape Test",\n    filter: null\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example demonstrates the triangle shape markers with different curves and colors. Includes a circle series for comparison."\n      }\n    }\n  }\n}',...TriangleShapes.parameters?.docs?.source}}},ButtonHoverInteraction.parameters={...ButtonHoverInteraction.parameters,docs:{...ButtonHoverInteraction.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    filterLimit: 5,\n    dataSet: [{\n      label: "Performance",\n      shape: "circle",\n      curve: "curveLinear",\n      color: "#2196F3",\n      series: [{\n        date: "2019",\n        value: 75,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 82,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 90,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 85,\n        certainty: false\n      }]\n    }, {\n      label: "Efficiency",\n      shape: "square",\n      curve: "curveLinear",\n      color: "#4CAF50",\n      series: [{\n        date: "2019",\n        value: 60,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 75,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 85,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 80,\n        certainty: false\n      }]\n    }, {\n      label: "Quality",\n      shape: "triangle",\n      curve: "curveBumpX",\n      color: "#FF9800",\n      series: [{\n        date: "2019",\n        value: 85,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 88,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 92,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 95,\n        certainty: false\n      }]\n    }, {\n      label: "Innovation",\n      shape: "circle",\n      curve: "curveLinear",\n      color: "#9C27B0",\n      series: [{\n        date: "2019",\n        value: 45,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 52,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 68,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 72,\n        certainty: false\n      }]\n    }, {\n      label: "Customer Satisfaction",\n      shape: "square",\n      curve: "curveLinear",\n      color: "#FF5722",\n      series: [{\n        date: "2019",\n        value: 80,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 78,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 82,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 88,\n        certainty: false\n      }]\n    }],\n    title: "Interactive Button Hover Example",\n    filter: {\n      limit: 5,\n      date: "2021",\n      criteria: "value",\n      sortingDir: "desc"\n    }\n  },\n  argTypes: {\n    filterLimit: {\n      control: {\n        type: "range",\n        min: 1,\n        max: 5,\n        step: 1\n      },\n      description: "Number of items to show"\n    }\n  },\n  render: args => {\n    const [currentHighlight, setCurrentHighlight] = React.useState<string[]>([]);\n    const [filterDate, setFilterDate] = React.useState("2021");\n\n    // Get all available dates from the dataset\n    const availableDates = React.useMemo(() => {\n      const dates = new Set<string>();\n      args.dataSet.forEach(item => {\n        item.series.forEach(point => {\n          dates.add(point.date.toString());\n        });\n      });\n      return Array.from(dates).sort();\n    }, [args.dataSet]);\n\n    // Create filtered dataset based on limit and date\n    const filteredDataSet = React.useMemo(() => {\n      return {\n        ...args,\n        filter: {\n          limit: args.filterLimit || 5,\n          date: filterDate,\n          criteria: "value",\n          sortingDir: "desc"\n        }\n      };\n    }, [args, filterDate]);\n\n    // Style for the controls container\n    const controlsContainerStyle = {\n      display: "flex",\n      gap: "20px",\n      marginBottom: "20px",\n      alignItems: "center"\n    };\n\n    // Style for the select controls\n    const selectStyle = {\n      padding: "8px 12px",\n      borderRadius: "4px",\n      border: "1px solid #ccc",\n      fontSize: "14px",\n      minWidth: "120px"\n    };\n\n    // Style for the button container\n    const buttonContainerStyle = {\n      display: "flex",\n      gap: "10px",\n      marginBottom: "20px",\n      flexWrap: "wrap" as const\n    };\n\n    // Style for individual buttons\n    const buttonStyle = (label: string) => ({\n      padding: "8px 16px",\n      border: "2px solid",\n      borderColor: args.dataSet.find(d => d.label === label)?.color || "#ccc",\n      borderRadius: "4px",\n      background: currentHighlight.includes(label) ? args.dataSet.find(d => d.label === label)?.color : "white",\n      color: currentHighlight.includes(label) ? "white" : args.dataSet.find(d => d.label === label)?.color,\n      cursor: "pointer",\n      transition: "all 0.3s ease",\n      fontWeight: 500\n    });\n\n    // Style for labels\n    const labelStyle = {\n      fontSize: "14px",\n      fontWeight: 500\n    };\n    return <MichiVzProvider colorsMapping={args.dataSet.reduce((acc, item) => ({\n      ...acc,\n      [item.label]: item.color\n    }), {})} highlightItems={currentHighlight}>\r\n        <div>\r\n          <div style={controlsContainerStyle}>\r\n            <div>\r\n              <label style={labelStyle}>Reference Date: </label>\r\n              <select value={filterDate} onChange={e => setFilterDate(e.target.value)} style={selectStyle}>\r\n                {availableDates.map(date => <option key={date} value={date}>\r\n                    {date}\r\n                  </option>)}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div style={buttonContainerStyle}>\r\n            {filteredDataSet.dataSet.map(item => <button key={item.label} style={buttonStyle(item.label)} onMouseEnter={() => setCurrentHighlight([item.label])} onMouseLeave={() => setCurrentHighlight([])}>\r\n                {item.label}\r\n              </button>)}\r\n            <button style={{\n            padding: "8px 16px",\n            border: "2px solid #666",\n            borderRadius: "4px",\n            background: currentHighlight.length === args.filterLimit ? "#666" : "white",\n            color: currentHighlight.length === args.filterLimit ? "white" : "#666",\n            cursor: "pointer",\n            transition: "all 0.3s ease",\n            fontWeight: 500\n          }} onMouseEnter={() => setCurrentHighlight(filteredDataSet.dataSet.map(d => d.label))} onMouseLeave={() => setCurrentHighlight([])}>\r\n              Show All\r\n            </button>\r\n          </div>\r\n          <LineChartComponent {...filteredDataSet} />\r\n        </div>\r\n      </MichiVzProvider>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example demonstrates button-based hover interaction with the line chart using the MichiVzProvider context. Use the slider in the controls panel to adjust how many lines to show, and select which date to use as reference for the filtering. Hover over the buttons to highlight corresponding lines and data points. The \'Show All\' button highlights all visible series simultaneously."\n      }\n    }\n  }\n}',...ButtonHoverInteraction.parameters?.docs?.source}}},SameDataLabelDifferentShapes.parameters={...SameDataLabelDifferentShapes.parameters,docs:{...SameDataLabelDifferentShapes.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...commonProps,\n    dataSet: [{\n      label: "Performance Metrics",\n      shape: "circle",\n      curve: "curveLinear",\n      color: "#2196F3",\n      series: [{\n        date: "2019",\n        value: 75,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 82,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 90,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 85,\n        certainty: false\n      }]\n    }, {\n      label: "Performance Metrics",\n      // Same label\n      shape: "triangle",\n      // Different shape\n      curve: "curveLinear",\n      color: "#4CAF50",\n      // Different color\n      series: [{\n        date: "2019",\n        value: 65,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 72,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 80,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 75,\n        certainty: false\n      }]\n    }, {\n      label: "Other Metric",\n      shape: "square",\n      curve: "curveLinear",\n      color: "#FF9800",\n      series: [{\n        date: "2019",\n        value: 45,\n        certainty: true\n      }, {\n        date: "2020",\n        value: 52,\n        certainty: true\n      }, {\n        date: "2021",\n        value: 58,\n        certainty: true\n      }, {\n        date: "2022",\n        value: 62,\n        certainty: false\n      }]\n    }],\n    title: "Same Label Different Shapes Test"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This example demonstrates how the chart handles multiple datasets with the same label but different shapes and colors. When hovering over a line or shape, all elements with the same data-label should be highlighted together."\n      }\n    }\n  },\n  render: args => {\n    const [currentHighlight, setCurrentHighlight] = React.useState<string[]>([]);\n\n    // Style for the button container\n    const buttonContainerStyle = {\n      display: "flex",\n      gap: "10px",\n      marginBottom: "20px",\n      flexWrap: "wrap" as const\n    };\n\n    // Style for individual buttons\n    const buttonStyle = (label: string) => ({\n      padding: "8px 16px",\n      border: "2px solid",\n      borderColor: args.dataSet.find(d => d.label === label)?.color || "#ccc",\n      borderRadius: "4px",\n      background: currentHighlight.includes(label) ? args.dataSet.find(d => d.label === label)?.color : "white",\n      color: currentHighlight.includes(label) ? "white" : args.dataSet.find(d => d.label === label)?.color,\n      cursor: "pointer",\n      transition: "all 0.3s ease",\n      fontWeight: 500\n    });\n\n    // Get unique labels with proper typing\n    const uniqueLabels = Array.from(new Set(args.dataSet.map(d => d.label as string))) as string[];\n    return <MichiVzProvider colorsMapping={args.dataSet.reduce((acc, item) => ({\n      ...acc,\n      [item.label]: item.color\n    }), {} as Record<string, string>)} highlightItems={currentHighlight}>\r\n        <div>\r\n          <div style={buttonContainerStyle}>\r\n            {uniqueLabels.map(label => <button key={label} style={buttonStyle(label)} onMouseEnter={() => setCurrentHighlight([label])} onMouseLeave={() => setCurrentHighlight([])}>\r\n                {label}\r\n              </button>)}\r\n            <button style={{\n            padding: "8px 16px",\n            border: "2px solid #666",\n            borderRadius: "4px",\n            background: currentHighlight.length === uniqueLabels.length ? "#666" : "white",\n            color: currentHighlight.length === uniqueLabels.length ? "white" : "#666",\n            cursor: "pointer",\n            transition: "all 0.3s ease",\n            fontWeight: 500\n          }} onMouseEnter={() => setCurrentHighlight(uniqueLabels)} onMouseLeave={() => setCurrentHighlight([])}>\r\n              Show All\r\n            </button>\r\n          </div>\r\n          <LineChartComponent {...args} />\r\n        </div>\r\n      </MichiVzProvider>;\n  }\n}',...SameDataLabelDifferentShapes.parameters?.docs?.source}}},Monthly.parameters={...Monthly.parameters,docs:{...Monthly.parameters?.docs,source:{originalSource:'{\n  args: {\n    dataSet: [{\n      label: "Monthly Sales",\n      series: [{\n        date: "2023-01-01",\n        value: 100,\n        certainty: true\n      }, {\n        date: "2023-02-01",\n        value: 120,\n        certainty: true\n      }, {\n        date: "2023-03-01",\n        value: 90,\n        certainty: true\n      }, {\n        date: "2023-04-01",\n        value: 130,\n        certainty: true\n      }, {\n        date: "2023-05-01",\n        value: 110,\n        certainty: true\n      }]\n    }],\n    width: 700,\n    height: 400,\n    margin: {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    },\n    showCombined: false,\n    yAxisFormat: (d: any) => `${d}`,\n    xAxisDataType: "date_monthly",\n    title: "Monthly Data (Small Range)",\n    tooltipFormatter: (dataSet: any, d: any) => JSON.stringify(d)\n  }\n}',...Monthly.parameters?.docs?.source}}},ManyMonths.parameters={...ManyMonths.parameters,docs:{...ManyMonths.parameters?.docs,source:{originalSource:'{\n  args: {\n    dataSet: [{\n      label: "Long Monthly Series",\n      series: Array.from({\n        length: 36\n      }, (_, i) => {\n        const date = new Date(2021, i, 1);\n        return {\n          date: date.toISOString().slice(0, 10),\n          value: 100 + Math.round(Math.sin(i / 3) * 30 + Math.random() * 20),\n          certainty: true\n        };\n      })\n    }],\n    width: 700,\n    height: 400,\n    margin: {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    },\n    showCombined: false,\n    yAxisFormat: (d: any) => `${d}`,\n    xAxisDataType: "date_monthly",\n    title: "Monthly Data (Many Months)",\n    tooltipFormatter: (dataSet: any, d: any) => JSON.stringify(d)\n  }\n}',...ManyMonths.parameters?.docs?.source}}}}}]);